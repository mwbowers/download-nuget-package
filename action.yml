name: 'Download NuGet Package'
author: Matt Bowers
description: 'Downloads a specific NuGet package using the provided nuget.config and saves it to a specified directory'

inputs:
  nuget-config:
    description: 'Path to the nuget.config file (optional).'
    required: false
    default: ''
  package-directory:
    description: 'Directory to save the downloaded NuGet package'
    required: true
  package-name:
    description: 'NuGet package name'
    required: true
  version:
    description: 'Version of the NuGet package (optional). Defaults to latest if not provided.'
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: Set up Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Create temporary directories
      shell: bash
      run: |
        TEMP_DIR=$(mktemp -d)
        TEMP_PACKAGE_DIR=$(mktemp -d)
        echo "TEMP_DIR=$TEMP_DIR" >> $GITHUB_ENV
        echo "TEMP_PACKAGE_DIR=$TEMP_PACKAGE_DIR" >> $GITHUB_ENV
        echo "Temporary project directory: ${{ env.TEMP_DIR }}"
        echo "Temporary package directory: ${{ env.TEMP_PACKAGE_DIR }}"

    - name: Create temporary project
      shell: bash
      run: |
        dotnet new classlib -n TempLibrary --output "${{ env.TEMP_DIR }}"
        echo "Temporary project created at ${{ env.TEMP_DIR }}/TempLibrary"

    - name: Copy nuget.config (if provided)
      shell: bash
      run: |
        if [[ -n "${{ inputs.nuget-config }}" ]]; then
          cp ${{ inputs.nuget-config }} ${{ env.TEMP_DIR }}/nuget.config
          echo "Copied nuget.config to ${{ env.TEMP_DIR }}"
        fi

    - name: Add NuGet package
      shell: bash
      run: |
        cd ${{ env.TEMP_DIR }}

        if [[ -z "${{ inputs.version }}" ]]; then
          VERSION_ARG=""
        else
          VERSION_ARG="--version ${{ inputs.version }}"
        fi

        dotnet add package ${{ inputs.package-name }} $VERSION_ARG --package-directory ${{ env.TEMP_PACKAGE_DIR }} || true

    - name: Find and copy NuGet package
      shell: bash
      run: |
        if [ ! -d "${{ inputs.package-directory }}" ]; then
          mkdir -p "${{ inputs.package-directory }}"
          echo "Created missing directory: ${{ inputs.package-directory }}"
        fi

        if [[ -n "${{ inputs.version }}" ]]; then
          PACKAGE_PATH=$(find ${{ env.TEMP_PACKAGE_DIR }} -type f -iname "${{ inputs.package-name }}.${{ inputs.version }}*.nupkg" -print -quit)
        else
          PACKAGE_PATH=$(find ${{ env.TEMP_PACKAGE_DIR }} -type f -iname "${{ inputs.package-name }}*.nupkg" -print -quit)
        fi
    
        if [[ -n "$PACKAGE_PATH" ]]; then
          cp "$PACKAGE_PATH" ${{ inputs.package-directory }}
          echo "Copied $PACKAGE_PATH to ${{ inputs.package-directory }}"
        else
          echo "No package found for ${{ inputs.package-name }} version ${{ inputs.version }}"
          echo "ErrorMessage=Package not found" >> $GITHUB_ENV
          exit 1
        fi

    - name: Clean up temporary directories
      shell: bash
      run: |
        rm -rf ${{ env.TEMP_DIR }}
        rm -rf ${{ env.TEMP_PACKAGE_DIR }}
        echo "Temporary directories deleted"

branding:
    icon: package
    color: gray-dark
